xseq <- seq(min(x), max(x), le = 255)
lines(xseq, JLO.calibr(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4, xpd = NA)
par(mfrow = c(1, 1))
# CALIBRATION
plotabif(abifdata = data,
chanel = 1,  # nb données fluochromes
tmin = 1.5,
ylim = c(0, 2), calibr = JLO.calibr
)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thresh = 0.1,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thresh = 0.3,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.3,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.1,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.6,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 1,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.1,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.2,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.15,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0.15,
fig = T)
warnings()
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 0,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 09,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 9,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = 1,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = .35,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
thres = .1,
fig = T)
warnings()
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
tmin = 1.5,
calibr = JLO.calibr,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
tmin = 1.5,
calibr = JLO.calibr,
fig = T)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
fig = T)
plotabif(data, 2, 3.2, 3.7, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
plotabif(data, 1, 3.2, 3.7, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
plotabif(data, 1, 1.5, 3.7, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
plotabif(data, 1, 1.5, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
plotabif(data, 1.5, 1.5, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
# CHANNEL 1
ECH6FAM.maxisbp <- plotladder(data,
chanel = 1,
calibr = JLO.calibr,
fig = T)
# CALIBRATION
plotabif(abifdata = data,
chanel = 1,  # nb données fluochromes
tmin = 1.5,
ylim = c(0, 2), calibr = JLO.calibr
)
# PLOT AVEC TMIN / TMAX / YLIM pour "zoomer" sur les pics
plotabif(abifdata = data,
chanel = 1,  # nb données fluochromes
ylim = c(0, 50)
)
plotabif(data, 1.5, 1.5, calibr = JLO.calibr, ladder.bp = ECHVIC.maxisbp)
?plotabif
plotabif(data,
1, 1.5,
calibr = JLO.calibr,
ladder.bp = ECHVIC.maxisbp)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = data$Data$`Dye#.1`,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,
tmin = 1.5
)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.4,
ylim = c(0, 5)
)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.4,
ylim = c(0, 5)
)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,
tmin = 1.5
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 16,  # 14 car standard sur 14 pics
tmin = 1.5
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.5
)
maxis
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.5
)
maxis
# Chargement des données d'étalonnage
data(gs500liz)
lizok <- gs500liz$liz
lizok[!gs500liz$mask1 | !gs500liz$mask2] <- NA
lizok <- lizok[-c(1,2)]
y <- lizok[!is.na(lizok)]
x <- maxis$maxis[!is.na(lizok)]
# Construction fonction de calibrage
JLO.calibr <- splinefun(x, y)  # fonction calibrage
xseq <- seq(min(x), max(x), le = 255)
# Plot
par(mfrow = c(1, 1))
plot(x, y, las = 1, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
lines(xseq, JLO.calibr(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4, xpd = NA)
gs500liz$liz
gs500liz$mask1
gs500liz$mask2
lizok[-c(1,2)]
# Chargement des données d'étalonnage
data(gs500liz)
View(gs500liz)
lizok <- lizok[-c(1,2)]
y <- lizok[!is.na(lizok)]
maxis$maxis[!is.na(lizok)]
lizok[!is.na(lizok)]
maxis$maxis
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.5,
)
maxis
# Chargement des données d'étalonnage
data(gs500liz)
lizok <- gs500liz$liz  # longueur en Pb des marqueurs
lizok[!gs500liz$mask1 | !gs500liz$mask2] <- NA  # ?
lizok <- lizok[-c(1,2)]
y <- lizok[!is.na(lizok)]
x <- maxis$maxis[!is.na(lizok)]  # localisation temporelle des pics dans notre échantillon standard
# CONSTRUCTION FONCTION DE CALIBRAGE
calibrage_function <- splinefun(x, y)  # fonction calibrage
xseq <- seq(min(x), max(x), le = 255)
# Plot
par(mfrow = c(1, 1))
plot(x, y, las = 1, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
lines(xseq, calibrage_function(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4, xpd = NA)
# Plot
par(mfrow = c(1, 1))
plot(x, y, las = 1, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
plot(x, y, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
# Plot
par(mfrow = c(1, 1))
plot(x, y, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
lines(xseq, calibrage_function(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4, xpd = NA)
plot(x = , las =)
text(x,y,lizok[!is.na(lizok)], pos = 2, xpd = NA)
lizok[!is.na(lizok)]
text(x,y,lizok[!is.na(lizok)], pos = 4)
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.5,
)
maxis
# Chargement des données d'étalonnage
data(gs500liz)
lizok <- gs500liz$liz  # longueur en Pb des marqueurs
lizok[!gs500liz$mask1 | !gs500liz$mask2] <- NA  # ?
lizok <- lizok[-c(1,2)]
y <- lizok[!is.na(lizok)]
x <- maxis$maxis[!is.na(lizok)]  # localisation temporelle des pics dans notre échantillon standard
# CONSTRUCTION FONCTION DE CALIBRAGE
calibrage_function <- splinefun(x, y)  # fonction calibrage
xseq <- seq(min(x), max(x), le = 255)
# Plot
par(mfrow = c(1, 1))
plot(x, y, las = 1, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
lines(xseq, calibrage_function(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4)
plot(rnorm(n = 100) ~ rnorm(n = 100))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5)
)
par(mfrow = c(1, 1), mgp = ...)
par(mfrow = c(1, 1), mgp = NULL)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.5,
ylim = c(0, 5),
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.5,
)
dir = ("~/marmot-quantitative-genetics/PEDIGREE_GENETIQUE/GENOSCREEN/")
data <- read.abif(paste0(dir, "Mix1/B02_1951_014.fsa"))  # data marmotte test
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(seqinr)
# Chunk 3
dir = ("~/marmot-quantitative-genetics/PEDIGREE_GENETIQUE/GENOSCREEN/")
# Chunk 4
JLO <- read.abif(system.file("abif/2_FAC321_0000205983_B02_004.fsa", package = "seqinr"))  # profil génétique
ECH <- read.abif(system.file("abif/2_0000206138_C01_005.fsa", package = "seqinr"))  # échelle allélique
# Chunk 5
data <- read.abif(paste0(dir, "Mix1/B02_1951_014.fsa"))  # data marmotte test
# data <- read.abif(paste0(dir, "Mix1/A02_1890_016.fsa"))  # data marmotte test
head(data$Directory)
head(JLO$Directory)
head(ECH$Directory)
# Chunk 6
# Nos data
data$Data$`Dye#.1`
# Data packages
JLO$Data$`Dye#.1`
ECH$Data$`Dye#.1`
# Chunk 9
par(mfrow = c(1, 1))
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.35,
ylim = c(0, 50)
)
# Localisation des pics par rapport au standard (présent dans channel 5)
maxis <- peakabif(
data,
chanel = 5,
npeak = 14,  # 14 car standard sur 14 pics
tmin = 1.35,
thres = 0.4
)
maxis
# Chargement des données d'étalonnage
data(gs500liz)
lizok <- gs500liz$liz  # longueur en Pb des marqueurs
lizok <- lizok[-which(lizok %in% c(35, 50))]
# lizok[!gs500liz$mask1 | !gs500liz$mask2] <- NA  # rpz les fragments incertains qu'on enlève
#lizok <- lizok[-c(1,2)]
y <- lizok[!is.na(lizok)]
x <- maxis$maxis[!is.na(lizok)]  # localisation temporelle des pics dans notre échantillon standard
# CONSTRUCTION FONCTION DE CALIBRAGE
calibrage_function <- splinefun(x, y)  # fonction calibrage
xseq <- seq(min(x, na.rm = T), max(x, na.rm = T), le = 255)
# Plot
par(mfrow = c(1, 1))
plot(x, y, las = 1, xlab = "Temps", ylab = "Taille [bp]", main = "Calibration")
lines(xseq, calibrage_function(xseq), col = "darkgreen")
text(x,y,lizok[!is.na(lizok)], pos = 4)
library(shiny); runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.35,
ylim = c(0, 50)
)
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.35,
ylim = c(0, 10)
)
data <- read.abif(paste0(dir, "Mix1/B02_1951_014.fsa"))  # data marmotte test
# PLOT STANDARD ETALON
plotabif(abifdata = data,
chanel = 5,  # données fluochromes standard
tmin = 1.35,
ylim = c(0, 10)
)
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
runApp('marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE/GENOFREE.R')
ref_allele <- read.table("data/REF_MARQUEUR_MARMOTTE.txt", header = T)
ref_allele$se <- as.numeric(ref_allele$se)
# get ci lower and upper to get the range of microsatellite length according to alleles
ref_allele["ci_lower"] <- ref_allele$pb - ref_allele$se
setwd("~/marmot-quantitative-genetics/PEDIGREE_GENETIQUE/MARMOTTE_PEDIGREE_GENETIQUE")
ref_allele <- read.table("data/REF_MARQUEUR_MARMOTTE.txt", header = T)
ref_allele$se <- as.numeric(ref_allele$se)
# get ci lower and upper to get the range of microsatellite length according to alleles
ref_allele["ci_lower"] <- ref_allele$pb - ref_allele$se
ref_allele["ci_upper"] <- ref_allele$pb + ref_allele$se
# for control (because one unique marker, needs to increase se)
control_pb <- ref_allele[grepl(pattern = "C", ref_allele$marker), "pb"]
ref_allele[grepl(pattern = "C", ref_allele$marker), "ci_lower"] <- control_pb - 1
ref_allele[grepl(pattern = "C", ref_allele$marker), "ci_upper"] <- control_pb + 1
# rename fluo HEX in VIC
ref_allele$fluo[ref_allele$fluo == "HEX"] <- "VIC"
ref_allele$fluo[ref_allele$fluo == "6FAM"] <- "6-FAM"
ref_allele
data
data$Data$DyeN.1
data$Data$DyeN.2
data$Data$DyeN.3
data$Data$DyeN.4
data$Data$DyeN.5
runApp('GENOFREE.R')
ref_allele
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
runApp('GENOFREE.R')
